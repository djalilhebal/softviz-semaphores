/*
 * General stuff
 **************************/

 * {
  box-sizing: border-box;
  margin: 0 auto;
  padding: 0;
}

body {
  background: #efefef;
  text-align: center;
  font-size: 17px;
}

header {
  padding: 1em;
}

h2 {
  margin-bottom: 1em;
}

a {
  color: purple;
}

ul {
  margin: 1em 2em;
  list-style: square;
}
li {
  margin-bottom: 0.5em;
}

hr {
  margin: 1em auto;
}

code {
  background: dimgray;
  color: white;
  padding: 1px 2px;
}


/*
 * UI stuff
 **************************/

main {
  background: #ccc;
  max-width: 850px;
  margin: 10px auto;
  padding: 10px 20px;
}

main h2 {
  background: white;
  font-size: 1.75em;
  border-radius: 1em;
  padding: 0.125em;
  margin-bottom: 0.25em;
}

main fieldset {
  border: 0px;
  padding: 5px;
  margin-bottom: 10px;
}

main legend {
  background: white;
  border-radius: 10px;
  font-size: 1.5em;
  padding: 10px;
}

#user-vars {
  background: white;
  text-align: left;
}

#user-vars input {
  color: blue;
  font-size: 17px;
  min-width: 280px;
  outline: none;
  border: 0;
  border-bottom: 2px dashed;
}
#user-vars input:focus {
  border-bottom: 2px solid;
}

#user-algorithms {
  background: white;
}

#user-algorithms label {
  width: 30%;
  background-color: white;
  display: inline-block;
  font-weight: bold;
}

#user-algorithms textarea {
  color: blue;
  height: 150px;
  width: 100%;
  padding: 3px;
  overflow-y: visible;
}
/* Meaning it has an error message */
#user-algorithms textarea[title] {
  background-color: red;
  color: black;
}

#buttons {
  margin: 5px 0;
}

#buttons button {
  border: 3px solid rebeccapurple;
  padding: 5px;
  background: purple;
  color: white;
  font-size: 1em;
  font-weight: bold;
  transition: color 0.5s;
}
#buttons button:hover, #buttons button:focus {
  background: #a200a2;
  cursor: pointer;
}
#buttons button[disabled], fieldset[disabled] #buttons button {
  font-weight: normal;
  cursor: not-allowed;
  background: dimgray;
}

aside {
  text-align: left;
}

section, footer {
  background: gainsboro;
  text-align: left;
  max-width: 1000px;
  margin: 10px auto;
  padding: 10px;
}

footer {
  text-align: center;
}

/*
 * Drawing/animation stuff
 **************************/

#sim {
  /* itch.io uses 640x360 by default */
  width: 640px;
  height: 360px;

  display: block;
  position: relative;
  background: black;
  border: 2px solid black;
  margin: 10px auto;
  overflow: hidden;
}

#sim > * {
  position: absolute;
}

#light-1, #light-2 {
  display: inline-block;
  width: 50px;
  height: 50px;
  border: 4px solid transparent;
  border-radius: 50%;
  background-color: red;
  background-image: url(images/traffic-lights.svg);
  background-repeat: no-repeat;
}
#sim[data-ctrl-queued="true"] #light-1, #sim[data-ctrl-queued="true"] #light-2 {
  border-color: yellow;
}
#sim[data-light="0"] #light-1, #sim[data-light="0"] #light-2 {
  background-color: gray !important;
}
#sim[data-light="1"] #light-1 {
  background-color: green;
}
#sim[data-light="2"] #light-2 {
  background-color: green;
}

#light-1 {
  top: 75px;
  left: 120px;
}
#light-2 {
  top: 180px;
}

#intersection, #lane-1, #lane-2 {
  background: white;
}

#lane-1 {
  left: 180px;
  width: 50px;
  height: 100%;
}

#lane-2 {
  bottom: 70px;
  height: 50px;
  width: 100%;
}

#intersection {
  border-radius: 50%;
  width: 110px;
  height: 110px;
  top: 205px;
  left: 150px;

  /* Only used to place elements at the center of the intersection */
  display: grid;
  place-items: center center;
}
#sim[data-state="error"] #intersection {
  background: radial-gradient(red, transparent);
}

.vehicle {
  /* Will be reset by JavaScript */
  --color: black;
  --pos: 10;
  
  display: inline-block;
  width: 45px;
  height: 45px;
  margin: 2px;
  position: absolute;
  background-color: var(--color);
  background-position: center;
  background-repeat: no-repeat;

  will-change: transform;
  transition: transform 0.3s;
  transform:
    translate(
      calc((var(--pos) + 1.5) * var(--delta-x) * 1px),
      calc((var(--pos) + 1.5) * var(--delta-y) * 1px)
     )

    rotateY(var(--rotate-y))
    rotateZ(var(--rotate-z));
}
.vehicle.car { background-image: url(images/city-car.svg); }
.vehicle.truck { background-image: url(images/truck.svg); }

#sim[data-state="error"] .vehicle[data-state="leaving"] {
  --pos: -1.5 !important; /* final position = 0 = -1.5 + 1.5 */
  position: static;
  animation: none;
}

.vehicle.west {
  --rotate-y: 180deg;
  --rotate-z: 0deg;

  --delta-x: 50;
  --delta-y: 0;
}

.vehicle.south {
  --rotate-y: 0deg;
  --rotate-z: 90deg;

  --delta-x: 0;
  --delta-y: -50;
}

.vehicle[data-state="leaving"] {
  animation: 1.5s vehicle-leave ease-in forwards;
}

@keyframes vehicle-leave {
  0% {
    opacity: 1;

    transform:
      translate(
        calc((var(--pos) + 1.5) * var(--delta-x) * 1px),
        calc((var(--pos) + 1.5) * var(--delta-y) * 1px)
      )

      rotateY(var(--rotate-y))
      rotateZ(var(--rotate-z));
  }

  75% {
    opacity: 1;
  }
  
  100% {
    opacity: 0;

    transform:
      translate(
        calc(var(--delta-x) * -2.5px),
        calc(var(--delta-y) * -1.5px)
      )

      rotateY(var(--rotate-y))
      rotateZ(var(--rotate-z));
  }

}
