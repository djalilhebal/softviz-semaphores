* {
  /* Use natural box layout model */
  box-sizing: border-box;
  margin: 0 auto;
  padding: 0;
}

body {
  background: #efefef;
  text-align: center;
}

header {
  padding: 1em;
}

a {
  color: purple;
}

code {
  background: dimgray;
  color: white;
  padding: 1px 2px;
}

ul {
  list-style-type: square;
  margin: inherit;
}

/********************************/

main {
  margin: 10px auto;
  background: #ccc;
  padding: 25px;
  max-width: 900px;
}

fieldset {
  border: 0px;
}

table {
  background: white;
  width: 100%;
}

#user-vars {
  background: white;
  text-align: left;
  padding: 5px;
  margin-bottom: 5px;
  line-height: 2;
  font-size: 17px;
}

#user-vars input {
  color: blue;
  font-size: 17px;
  min-width: 280px;
  outline: none;
  border: 0;
  border-bottom: 2px dashed;
}
#user-vars input:focus {
  border-bottom: 2px solid;
}

#user-algorithms {
  background: white;
}

#user-algorithms legend {
  font-size: 30px;
  background: white;
  border-radius: 10px;
  padding: 10px;
}

#user-algorithms label {
  width: 30%;
  background-color: white;
  display: inline-block;
  font-weight: bold;
}

#user-algorithms textarea {
  color: blue;
  height: 150px;
  width: 100%;
  padding: 3px;
  /* outline: none; */
}
textarea[title] {
  background-color: red;
  color: black;
}

#buttons {
  margin: 5px 0;
}

#buttons button {
  border: 3px solid rebeccapurple;
  padding: 5px;
  background: purple;
  color: white;
  cursor: pointer;
  font-size: 1em;
  font-weight: bold;
}
#buttons button[disabled], fieldset[disabled] #buttons button {
  font-weight: normal;
  cursor: not-allowed;
  background: dimgray;
}

/********************************/

#sim {
  /* itch.io uses 640x360 by default */
  width: 640px;
  height: 360px;
  display: block;
  position: relative;
  background: black;
  border: 2px solid black;
  margin: 5px auto;
}

#sim > * {
  position: absolute;
}

#light-1, #light-2 {
  background-color: red;
  background-image: url(images/traffic-lights-red.svg);
  width: 50px;
  height: 50px;
  display: inline-block;
  border-radius: 50%;
  border: 3px solid transparent;
}
#sim[data-ctrl-queued="true"] #light-1, #sim[data-ctrl-queued="true"] #light-2 {
  border-color: yellow;
}

#sim[data-light="0"] #light-1, #sim[data-light="0"] #light-2 {
  background-color: gray !important;
}
#sim[data-light="1"] #light-1 {
  background-image: url(images/traffic-lights-green.svg);
  background-color: green;
}
#sim[data-light="2"] #light-2 {
  background-image: url(images/traffic-lights-green.svg);
  background-color: green;
}

#light-1 {
  top: 75px;
  left: 120px;
}
#light-2 {
  top: 180px;
}

#intersection, #lane-1, #lane-2 {
  background: white;
}

#lane-1 {
  left: 180px;
  width: 50px;
  height: 100%;
}

#lane-2 {
  bottom: 70px;
  height: 50px;
  width: 100%;
}

#intersection {
  border-radius: 50%;
  width: 100px;
  height: 100px;
  top: 210px;
  left: 155px;
  display: grid;
  place-items: center center;
  z-index: 1;
}
#sim[data-state="error"] #intersection {
  background: radial-gradient(red, transparent);
}

.vehicle {
  width: 45px;
  height: 45px;
  margin: 2px;
  display: inline-block;
  background-color: black;
  background-repeat: no-repeat;
  background-position: center;
  opacity: 1;
  transition: transform 0.3s; /* TODO: Tweak it by observing "My attempt" */
  position: absolute;
  z-index: 2;
}
.car { background-image: url(images/city-car.svg); }
.truck { background-image: url(images/truck.svg); }

#sim[data-state="error"] .vehicle[data-state="leaving"] {
  transform: none;
  position: static;
  animation: none;
}

.vehicle.west {
  --rotate-y: 180deg;
  --rotate-z: 0deg;

  --delta-x: 50;
  --delta-y: 0;
}

.vehicle.south {
  --rotate-y: 0deg;
  --rotate-z: 90deg;

  --delta-x: 0;
  --delta-y: -50;
}

.vehicle {
  transform:
    translate(
      calc((var(--pos) + 1.5) * var(--delta-x) * 1px),
      calc((var(--pos) + 1.5) * var(--delta-y) * 1px)
     )

    rotateY(var(--rotate-y))
    rotateZ(var(--rotate-z));
}

.vehicle[data-state="new"] {
  opacity: 0;
}

.vehicle[data-state="leaving"] {
  opacity: 1;
  animation: 1.5s leaving forwards;
}

@keyframes leaving {
  0% {
    opacity: 1;
    transform:
      translate(
        calc((var(--pos) + 1.5) * var(--delta-x) * 1px),
        calc((var(--pos) + 1.5) * var(--delta-y) * 1px)
      )

      rotateY(var(--rotate-y))
      rotateZ(var(--rotate-z));
  }

  50% {
    opacity: 1;
  }
  
  100% {
    opacity: 0;
    transform:
      translate(
        calc(var(--delta-x) * -2.5px),
        calc(var(--delta-y) * -1.5px)
      )

      rotateY(var(--rotate-y))
      rotateZ(var(--rotate-z));
  }

}

/********************************/

section, footer {
  background: gainsboro;
  text-align: left;
  margin: 10px;
  padding: 10px;
}

section pre {
  white-space: pre-line;
}

footer {
  text-align: center;
}
